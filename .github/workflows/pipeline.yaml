name: CI pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

env:
  HUSKY: 0
  PNPM_VERSION: '10'
  NODE_VERSION: '24'
  BUILD_ARTIFACT_NAME: 'ta-analysis-build-output'
  BUILD_ARTIFACT_FOLDER: 'dist/timed-automata-analysis'

jobs:
  # Check linting and formatting
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Linting
        run: pnpm eslint . --report-unused-disable-directives --max-warnings 0

      - name: Check formatting
        run: pnpm prettier --check .

  # Build the project
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Clean-up of the output directory for build
        run: pnpm clean

      - name: Build the project
        run: pnpm build

      - name: Upload build artifact
        if: github.ref == 'refs/heads/release' # build artifact is only needed for deployment
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: ${{ env.BUILD_ARTIFACT_FOLDER }}
          if-no-files-found: 'error'
          retention-days: 1

  # Run unit tests
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test

  # Run end-to-end tests with Playwright
  e2e:
    needs:
      - static-analysis
      - build
      - test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release') || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Clean-up of the test results
        run: pnpm clean

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-browsers-

      - name: Install browsers for Playwright
        run: pnpm playwright install --with-deps

      - name: Run E2E tests
        run: pnpm e2e

      - name: Upload Playwright results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: test-results/
          retention-days: 7

  # Deploy to GitHub Pages
  deploy:
    needs:
      - e2e
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release'
    concurrency:
      group: deploy_gh_pages
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: ${{ env.BUILD_ARTIFACT_FOLDER }}

      - name: List downloaded artifact files
        run: |
          echo "Contents of ${{ env.BUILD_ARTIFACT_FOLDER }}:"
          ls -R "${{ env.BUILD_ARTIFACT_FOLDER }}"

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ${{ env.BUILD_ARTIFACT_FOLDER }}
